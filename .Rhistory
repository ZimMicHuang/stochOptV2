N_TEST=10000
df0 = getDefDat(type="read")
markDat = getBondDat(type="read")
l_df = runSimLiab(type="gen",N_SIM=N_TRAIN+N_TEST)
l_train = l_df[1:N_TRAIN,]
simCF_train = runSimCF(markDat=markDat,defProb=df0,N_SIM = N_TRAIN,TF=TF)
stoch_mod = stochLiabMatch(l_df = l_train,simCF=simCF_train,markDat = markDat)
base_mod = regLiabMatch(l_df = l_train,simCF=simCF_train,markDat = markDat)
# systematically overestimate default probability
df1 = (df0+rnorm(n=length(df0),mean=0,sd=0.3*min(df0)))*0.4
simCF_test = runSimCF(markDat=markDat,defProb=df1,N_SIM = N_TEST,TF=TF)
l_test = l_df[(N_TRAIN+1):(N_TRAIN+N_TEST),]
res_smallDef = runTest_smallInt(simCF=simCF_test,l_df=l_test,
stoch_mod = stoch_mod,base_mod=base_mod,RF=markDat$RF[1])
res_smallDef = runTest_defProb(simCF=simCF_test,l_df=l_test,
stoch_mod = stoch_mod,base_mod=base_mod,RF=markDat$RF[1])
source("bond.R")
source("def.R")
source("liab.R")
source("cashFlow.R")
source("optimize.R")
source("stressDefProb.R")
res_smallDef = runTest_defProb(simCF=simCF_test,l_df=l_test,
stoch_mod = stoch_mod,base_mod=base_mod,RF=markDat$RF[1])
# good estimate on average, noise added
df1 = df0+rnorm(n=length(df0),mean=0,sd=0.3*min(df0))
# good estimate on average, noise added
df2 = df0+rnorm(n=length(df0),mean=0,sd=0.3*min(df0))
# systematically overestimate default probability
df1 = (df0+rnorm(n=length(df0),mean=0,sd=0.3*min(df0)))*0.4
simCF_test = runSimCF(markDat=markDat,defProb=df1,N_SIM = N_TEST,TF=TF)
l_test = l_df[(N_TRAIN+1):(N_TRAIN+N_TEST),]
res_smallDef = runTest_defProb(simCF=simCF_test,l_df=l_test,
stoch_mod = stoch_mod,base_mod=base_mod,RF=markDat$RF[1])
?sample.int()
l_test = l_df[sample.int(n=N_TRAIN+N_SIM),size=N_TRAIN]
l_test = l_df[sample.int(n=N_TRAIN+N_TEST),size=N_TRAIN]
l_test = l_df[sample.int(n=N_TRAIN+N_TEST),size=N_TRAIN,]
l_test = l_df[sample.int(n=N_TRAIN+N_TEST,size=N_TRAIN),]
dim(l_test)
l_test = l_df[sample.int(n=N_TRAIN+N_TEST,size=N_TEST),]
res_smallDef = runTest_defProb(simCF=simCF_test,l_df=l_test,
stoch_mod = stoch_mod,base_mod=base_mod,RF=markDat$RF[1])
# good estimate on average, noise added
df2 = df0+rnorm(n=length(df0),mean=0,sd=0.3*min(df0))
simCF_test = runSimCF(markDat=markDat,defProb=df2,N_SIM = N_TEST,TF=TF)
l_test = l_df[sample.int(n=N_TRAIN+N_TEST,size=N_TEST),]
res_normDef = runTest_defProb(simCF=simCF_test,l_df=l_test,
stoch_mod = stoch_mod,base_mod=base_mod,RF=markDat$RF[1])
dim(l_df)
(1/((1+RF/12)^(1:TF)))
RF=0.03
(1/((1+RF/12)^(1:TF)))
l_df[1:10000,]%*%(1/((1+RF/12)^(1:TF)))
stoch_NPV
source("bond.R")
source("def.R")
source("liab.R")
source("cashFlow.R")
source("optimize.R")
source("stressDefProb.R")
N_TRAIN=500
TF=36
N_TEST=10000
df0 = getDefDat(type="read")
markDat = getBondDat(type="read")
l_df = runSimLiab(type="gen",N_SIM=N_TRAIN+N_TEST)
l_train = l_df[1:N_TRAIN,]
simCF_train = runSimCF(markDat=markDat,defProb=df0,N_SIM = N_TRAIN,TF=TF)
stoch_mod = stochLiabMatch(l_df = l_train,simCF=simCF_train,markDat = markDat)
base_mod = regLiabMatch(l_df = l_train,simCF=simCF_train,markDat = markDat)
# systematically overestimate default probability
df1 = (df0+rnorm(n=length(df0),mean=0,sd=0.3*min(df0)))*0.4
simCF_test = runSimCF(markDat=markDat,defProb=df1,N_SIM = N_TEST,TF=TF)
l_test = l_df[sample.int(n=N_TRAIN+N_TEST,size=N_TEST),]
res_smallDef = runTest_defProb(simCF=simCF_test,l_df=l_test,
stoch_mod = stoch_mod,base_mod=base_mod,RF=markDat$RF[1])
source("bond.R")
source("def.R")
source("liab.R")
source("cashFlow.R")
source("optimize.R")
source("stressDefProb.R")
N_TRAIN=500
TF=36
N_TEST=10000
df0 = getDefDat(type="read")
markDat = getBondDat(type="read")
l_df = runSimLiab(type="gen",N_SIM=N_TRAIN+N_TEST)
l_train = l_df[1:N_TRAIN,]
simCF_train = runSimCF(markDat=markDat,defProb=df0,N_SIM = N_TRAIN,TF=TF)
stoch_mod = stochLiabMatch(l_df = l_train,simCF=simCF_train,markDat = markDat)
base_mod = regLiabMatch(l_df = l_train,simCF=simCF_train,markDat = markDat)
# systematically overestimate default probability
df1 = (df0+rnorm(n=length(df0),mean=0,sd=0.3*min(df0)))*0.4
simCF_test = runSimCF(markDat=markDat,defProb=df1,N_SIM = N_TEST,TF=TF)
l_test = l_df[sample.int(n=N_TRAIN+N_TEST,size=N_TEST),]
res_smallDef = runTest_defProb(simCF=simCF_test,l_df=l_test,
stoch_mod = stoch_mod,base_mod=base_mod,RF=markDat$RF[1])
# good estimate on average, noise added
df2 = df0+rnorm(n=length(df0),mean=0,sd=0.3*min(df0))
simCF_test = runSimCF(markDat=markDat,defProb=df2,N_SIM = N_TEST,TF=TF)
l_test = l_df[sample.int(n=N_TRAIN+N_TEST,size=N_TEST),]
res_normDef = runTest_defProb(simCF=simCF_test,l_df=l_test,
stoch_mod = stoch_mod,base_mod=base_mod,RF=markDat$RF[1])
(df0+rnorm(n=length(df0),mean=0,sd=0.3*min(df0)))
summary(df0+rnorm(n=length(df0),mean=0,sd=0.3*min(df0)))
# under estimate
df3 = (df0+rnorm(n=length(df0),mean=0,sd=0.3*min(df0)))*1.5
simCF_test = runSimCF(markDat=markDat,defProb=df3,N_SIM = N_TEST,TF=TF)
l_test = l_df[sample.int(n=N_TRAIN+N_TEST,size=N_TEST),]
res_largeDef = runTest_defProb(simCF=simCF_test,l_df=l_test,
stoch_mod = stoch_mod,base_mod=base_mod,RF=markDat$RF[1])
source("bond.R")
source("def.R")
source("liab.R")
source("cashFlow.R")
source("optimize.R")
source("stressSmallIntChange.R")
N_TRAIN=500
TF=36
N_TEST=10000
df0 = getDefDat(type="read")
markDat = getBondDat(type="read")
l_df = runSimLiab(type="gen",N_SIM=N_TRAIN+N_TEST)
l_train = l_df[1:N_TRAIN,]
simCF_train = runSimCF(markDat=markDat,defProb=df0,N_SIM = N_TRAIN,TF=TF)
stoch_mod = stochLiabMatch(l_df = l_train,simCF=simCF_train,markDat = markDat)
base_mod = regLiabMatch(l_df = l_train,simCF=simCF_train,markDat = markDat)
simCF_test = runSimCF(markDat=markDat,defProb=df0,N_SIM = N_TEST,TF=TF)
l_test = l_df[(N_TRAIN+1):(N_TRAIN+N_TEST),]
############# Interest rate models #######
{
require(forecast)
require(xts)
require(lubridate)
df=read.csv("DGS1MO.csv",colClasses = "character")
df=df[-which(df$DGS1MO=="."),]
r = xts(as.numeric(df$DGS1MO),order.by = ymd(df$DATE))
r = apply.monthly(r,FUN=function(x) {mean(na.omit(x))})
plot(r)
rising1 =auto.arima(r["2015/2019",],d=1,max.p=1,max.q = 0,ic="aic") # d=1 to fit vasicek
rising2 = auto.arima(r["2005/2007-03-30",],d=1,max.p=1,max.q = 0,ic="aic")
falling1=auto.arima(r["2000/2004-05",],d=1,max.p=1,max.q = 0,ic="aic")
falling2=auto.arima(r["2007-01/2008-12",],d=1,max.p=1,max.q = 0,ic="aic")
normal=auto.arima(r["2008-12/2014-12",],d=1,max.p=1,max.q = 0,ic="aic")
############################################
}
res_normal = runTest_smallInt(simCF=simCF_test,l_df=l_test,
stoch_mod = stoch_mod,base_mod=base_mod,
int_mod=normal,RF=markDat$RF[1])
res_rising = runTest_smallInt(simCF=simCF_test,l_df=l_test,
stoch_mod = stoch_mod,base_mod=base_mod,
int_mod=rising1,RF=markDat$RF[1])
res_falling = runTest_smallInt(simCF=simCF_test,l_df=l_test,
stoch_mod = stoch_mod,base_mod=base_mod,
int_mod=falling1,RF=markDat$RF[1])
source("bond.R")
source("def.R")
source("liab.R")
source("cashFlow.R")
source("optimize.R")
source("stressSmallIntChange.R")
N_TRAIN=500
TF=36
N_TEST=10000
df0 = getDefDat(type="read")
markDat = getBondDat(type="read")
l_df = runSimLiab(type="gen",N_SIM=N_TRAIN+N_TEST)
l_train = l_df[1:N_TRAIN,]
simCF_train = runSimCF(markDat=markDat,defProb=df0,N_SIM = N_TRAIN,TF=TF)
stoch_mod = stochLiabMatch(l_df = l_train,simCF=simCF_train,markDat = markDat)
base_mod = regLiabMatch(l_df = l_train,simCF=simCF_train,markDat = markDat)
simCF_test = runSimCF(markDat=markDat,defProb=df0,N_SIM = N_TEST,TF=TF)
l_test = l_df[(N_TRAIN+1):(N_TRAIN+N_TEST),]
############# Interest rate models #######
{
require(forecast)
require(xts)
require(lubridate)
df=read.csv("DGS1MO.csv",colClasses = "character")
df=df[-which(df$DGS1MO=="."),]
r = xts(as.numeric(df$DGS1MO),order.by = ymd(df$DATE))
r = apply.monthly(r,FUN=function(x) {mean(na.omit(x))})
plot(r)
rising1 =auto.arima(r["2015/2019",],d=1,max.p=1,max.q = 0,ic="aic") # d=1 to fit vasicek
rising2 = auto.arima(r["2005/2007-03-30",],d=1,max.p=1,max.q = 0,ic="aic")
falling1=auto.arima(r["2000/2004-05",],d=1,max.p=1,max.q = 0,ic="aic")
falling2=auto.arima(r["2007-01/2008-12",],d=1,max.p=1,max.q = 0,ic="aic")
normal=auto.arima(r["2008-12/2014-12",],d=1,max.p=1,max.q = 0,ic="aic")
############################################
}
res_normal = runTest_smallInt(simCF=simCF_test,l_df=l_test,
stoch_mod = stoch_mod,base_mod=base_mod,
int_mod=normal,RF=markDat$RF[1])
res_rising = runTest_smallInt(simCF=simCF_test,l_df=l_test,
stoch_mod = stoch_mod,base_mod=base_mod,
int_mod=rising1,RF=markDat$RF[1])
res_falling = runTest_smallInt(simCF=simCF_test,l_df=l_test,
stoch_mod = stoch_mod,base_mod=base_mod,
int_mod=falling1,RF=markDat$RF[1])
source("bond.R")
source("def.R")
source("liab.R")
source("cashFlow.R")
source("optimize.R")
source("stressDefProb.R")
N_TRAIN=500
TF=36
N_TEST=10000
df0 = getDefDat(type="read")
markDat = getBondDat(type="read")
l_df = runSimLiab(type="gen",N_SIM=N_TRAIN+N_TEST)
l_train = l_df[1:N_TRAIN,]
simCF_train = runSimCF(markDat=markDat,defProb=df0,N_SIM = N_TRAIN,TF=TF)
stoch_mod = stochLiabMatch(l_df = l_train,simCF=simCF_train,markDat = markDat)
base_mod = regLiabMatch(l_df = l_train,simCF=simCF_train,markDat = markDat)
# systematically overestimate default probability
df1 = (df0+rnorm(n=length(df0),mean=0,sd=0.3*min(df0)))*0.4
simCF_test = runSimCF(markDat=markDat,defProb=df1,N_SIM = N_TEST,TF=TF)
l_test = l_df[sample.int(n=N_TRAIN+N_TEST,size=N_TEST),]
res_smallDef = runTest_defProb(simCF=simCF_test,l_df=l_test,
stoch_mod = stoch_mod,base_mod=base_mod,RF=markDat$RF[1])
# good estimate on average, noise added
df2 = df0+rnorm(n=length(df0),mean=0,sd=0.3*min(df0))
simCF_test = runSimCF(markDat=markDat,defProb=df2,N_SIM = N_TEST,TF=TF)
l_test = l_df[sample.int(n=N_TRAIN+N_TEST,size=N_TEST),]
res_normDef = runTest_defProb(simCF=simCF_test,l_df=l_test,
stoch_mod = stoch_mod,base_mod=base_mod,RF=markDat$RF[1])
# under estimate
df3 = (df0+rnorm(n=length(df0),mean=0,sd=0.3*min(df0)))*1.5
simCF_test = runSimCF(markDat=markDat,defProb=df3,N_SIM = N_TEST,TF=TF)
l_test = l_df[sample.int(n=N_TRAIN+N_TEST,size=N_TEST),]
res_largeDef = runTest_defProb(simCF=simCF_test,l_df=l_test,
stoch_mod = stoch_mod,base_mod=base_mod,RF=markDat$RF[1])
source("bond.R")
source("def.R")
source("liab.R")
source("cashFlow.R")
source("optimize.R")
source("rebCost.R")
N_SIM=500
TF=36
df0 = getDefDat(type="read")
markDat = getBondDat(type="read")
l_df_all = runSimLiab(type="gen",N_SIM = 10000)
time_change_vec = seq(1,22,by=2)
mag_change_vec = seq(-0.05,0.05,by=0.01)
reb_cost_grid = expand.grid(time_change=time_change_vec,
mag_change=mag_change_vec)
reb_cost_grid = cbind(reb_cost_grid,reb_cost_stoch=numeric(length(time_change_vec)*length(mag_change_vec)),reb_cost_reg = numeric(length(time_change_vec)*length(mag_change_vec)))
rc=0
for (i in 1:nrow(reb_cost_grid)) {
l_df = l_df_all[sample(x=1:10000,size=N_SIM,replace=FALSE),]
tc = reb_cost_grid[i,1]
mc = reb_cost_grid[i,2]
rc = 0
res = getRebCost(time_change=tc,mag_change=mc,N_SIM = N_SIM,TF=TF,
df0=df0,markDat = markDat,l_df=l_df,
parallel=TRUE,cores=8)
av_reb_stoch = mean(res$stoch$reb_cost[,1]-res$stoch$reb_cost[,2]) # negative means cash outflow
av_reb_reg = mean(res$reg$reb_cost[,1]-res$reg$reb_cost[,2])
reb_cost_grid[i,3] = av_reb_stoch
reb_cost_grid[i,4] = av_reb_reg
print(reb_cost_grid[i,])
print(i)
}
source("bond.R")
source("def.R")
source("liab.R")
source("cashFlow.R")
source("optimize.R")
source("rebCost.R")
N_SIM=500
TF=36
df0 = getDefDat(type="read")
markDat = getBondDat(type="read")
l_df_all = runSimLiab(type="gen",N_SIM = 10000)
time_change_vec = seq(1,22,by=2)
mag_change_vec = seq(-0.05,0.05,by=0.01)
reb_cost_grid = expand.grid(time_change=time_change_vec,
mag_change=mag_change_vec)
reb_cost_grid = cbind(reb_cost_grid,reb_cost_stoch=numeric(length(time_change_vec)*length(mag_change_vec)),reb_cost_reg = numeric(length(time_change_vec)*length(mag_change_vec)))
rc=0
for (i in 1:nrow(reb_cost_grid)) {
l_df = l_df_all[sample(x=1:10000,size=N_SIM,replace=FALSE),]
tc = reb_cost_grid[i,1]
mc = reb_cost_grid[i,2]
rc = 0
res = getRebCost(time_change=tc,mag_change=mc,N_SIM = N_SIM,TF=TF,
df0=df0,markDat = markDat,l_df=l_df,
parallel=TRUE,cores=6)
av_reb_stoch = mean(res$stoch$reb_cost[,1]-res$stoch$reb_cost[,2]) # negative means cash outflow
av_reb_reg = mean(res$reg$reb_cost[,1]-res$reg$reb_cost[,2])
reb_cost_grid[i,3] = av_reb_stoch
reb_cost_grid[i,4] = av_reb_reg
print(reb_cost_grid[i,])
print(i)
}
stoch_mod$a
stoch_mod$A
dim(stoch_mod$A)
stoch_mod$a
which(stoch_mod$soln!=0)
which(stoch_mod$a==0)
rank(markDat$ytm)[which(stoch_mod$soln!=0),]
rank(markDat$ytm)[which(stoch_mod$soln!=0)]
rank(markDat$rec)[which(stoch_mod$soln!=0)]
rank(df0)[which(stoch_mod$soln!=0)]
df0[which(stoch_mod$soln!=0)]*(1-markDat$rec)+(1-df0[which(stoch_mod$soln!=0)])*markDat$ytm[which(stoch_mod$soln!=0)]
df0[which(stoch_mod$soln!=0)]*(1-markDat$rec[markDat$ytm)[which(stoch_mod$soln!=0)]])+(1-df0[which(stoch_mod$soln!=0)])*markDat$ytm[which(stoch_mod$soln!=0)]
df0[which(stoch_mod$soln!=0)]*(1-markDat$rec[which(stoch_mod$soln!=0)])+
(1-df0[which(stoch_mod$soln!=0)])*markDat$ytm[which(stoch_mod$soln!=0)]
lmlm = df0*(1-markDat$rec)+(1-df0)*markDat$ytm
rank(lmlm)[which(stoch_mod$soln!=0)]
lmlm
sort(lmlm)
lmlm(which(stoch_mod$soln!=0))
lmlm[which(stoch_mod$soln!=0)]
stoch_mod$surplus
stoch_mod$slack
stoch_mod$slack
stoch_mod$surplus
markDat$mp*stoch_mod$soln
sum(markDat$mp*stoch_mod$soln)
q_lev = inequ$b[which(stoch_mod$surplus==0)] # AVaR_p(L) where constraint is active
stoch_mod$A
stoch_mod$call
stoch_mod$obj
stoch_mod$maxi
stoch_mod$A
tail(stoch_mod$A)
stoch_mod$A
dim(stoch_mod$A)
tail(stoch_mod$A)
stoch_mod$A[101,]
stoch_mod$A[2,]
stoch_mod$A[2,100]==markDat$mp
stoch_mod$A[2,1:100]==markDat$mp
stoch_mod$A[3,1:100]==markDat$mp
stoch_mod$A[1,1:100]==markDat$mp
stoch_mod$A[13,1:100]==markDat$mp
stoch_mod$A%*%stoch_mod$soln
stoch_mod$A%*%c(stoch_mod$soln,stoch_mod$slack,stoch_mod$surplus)
stoch_mod$A%*%c(stoch_mod$soln,stoch_mod$slack,stoch_mod$surplus)[-1]
(stoch_mod$A%*%c(stoch_mod$soln,stoch_mod$slack,stoch_mod$surplus))[-1,]
(stoch_mod$A%*%c(stoch_mod$soln,stoch_mod$slack,stoch_mod$surplus))[-1,]+surplus
(stoch_mod$A%*%c(stoch_mod$soln,stoch_mod$slack,stoch_mod$surplus))[-1,]+stoch_mod$surplus
stoch_mod$surplus
stoch_mod$slack
A1 = stoch_mod$A[2,]
A1 %*% stoch_mod$soln
dim(A1)
A1 = stoch_mod$A[2,1:100,drop=FALSE]
A1 %*% stoch_mod$soln
A1 = stoch_mod$A[1,1:100,drop=FALSE]
A1 %*% stoch_mod$soln
stoch_mod$A[1,]
A1 = stoch_mod$A[1,,drop=FALSE]
A1 = stoch_mod$A[1,,drop=FALSE]
A1 %*% c(stoch_mod$soln,stoch_mod$slack,stoch_mod$surplus)
A2 = stoch_mod$A[2:(2+length(stoch_mod$surplus)),,drop=FALSE]
A2 %*% c(stoch_mod$soln,stoch_mod$slack,stoch_mod$surplus)
2+length(stoch_mod$surplus)
length(stoch_mod$surplus)
2:(2+length(stoch_mod$surplus))
(markDat$mp*stoch_mod$soln)
sum(markDat$mp*stoch_mod$soln)
sum(markDat$mp*stoch_mod$soln)+stoch_mod$slack
-sum(markDat$mp*stoch_mod$soln)+stoch_mod$slack
A1[1,]
A1[1,1:100]
markDat$mp
A2 %*% c(stoch_mod$soln,stoch_mod$slack,stoch_mod$surplus) + stoch_mod$surplus
A2 = stoch_mod$A[2:(1+length(stoch_mod$surplus)),,drop=FALSE]
A2 %*% c(stoch_mod$soln,stoch_mod$slack,stoch_mod$surplus)
A2 %*% c(stoch_mod$soln,stoch_mod$slack,stoch_mod$surplus) + surplus
A2 %*% c(stoch_mod$soln,stoch_mod$slack,stoch_mod$surplus) + stoch_mod$surplus
q_lev = stoch_mod$A[2:(1+length(stoch_mod$surplus)),,drop=FALSE] %*%
c(stoch_mod$soln,stoch_mod$slack,stoch_mod$surplus) +
stoch_mod$surplus
source("bond.R")
source("def.R")
source("liab.R")
source("cashFlow.R")
source("optimize.R")
N_TRAIN=500
TF=36
N_TEST=10000
df0 = getDefDat(type="read")
markDat = getBondDat(type="read")
N=5000
TF=36
df0 = getDefDat(type="read")
markDat = getBondDat(type="read")
l_df = runSimLiab(type="gen",N_SIM=N)
simCF = runSimCF(markDat=markDat,defProb=df0,N_SIM = N,TF=TF)
stoch_mod = stochLiabMatch(l_df = l_df,simCF=simCF,markDat = markDat)
q_lev = stoch_mod$A[2:(1+length(stoch_mod$surplus)),,drop=FALSE] %*%
c(stoch_mod$soln,stoch_mod$slack,stoch_mod$surplus) +
stoch_mod$surplus
# we need to reverse engineer the probability levels
p_lev = numeric()
l_df %*% 1/(1+markDat$RF[1])^(1:TF)
(1/(1+markDat$RF[1])^(1:TF))
(1/(1+markDat$RF[1]/12)^(1:TF))
l_df %*% (1/(1+markDat$RF[1]/12)^(1:TF))
l = l_df %*% (1/(1+markDat$RF[1]/12)^(1:TF))
q_lev
for (i in 1:N) {
q = l[i]
if (mean(l[which(l<=q)])%in%q_lev) {
p_cuts = c(p_cuts,i/length(l))
}
} # take also the optimal langrage
p_cuts
# we need to reverse engineer the probability levels
p_lev = numeric()
l = l_df %*% (1/(1+markDat$RF[1]/12)^(1:TF))
for (i in 1:N) {
q = l[i]
if (mean(l[which(l<=q)])%in%q_lev) {
p_lev = c(p_lev,i/length(l))
}
} # take also the optimal langrage
p_lev
for (i in 1:N) {
q = l[i]
print(mean(l[which(l<=q)]))
if (mean(l[which(l<=q)])%in%q_lev) {
p_lev = c(p_lev,i/length(l))
}
} # take also the optimal langrage
q_lev
l = sort(l_df %*% (1/(1+markDat$RF[1]/12)^(1:TF)))
for (i in 1:N) {
q = l[i]
print(mean(l[which(l<=q)]))
if (mean(l[which(l<=q)])%in%q_lev) {
p_lev = c(p_lev,i/length(l))
}
} # take also the optimal langrage
q_lev
sapply(l,function(s) {mean(l[which(l<=s)])})
l_loren = sapply(l,function(s) {mean(l[which(l<=s)])})
l_loren
head(l_loren)
head(l)
(1/(1+markDat$RF[1]/12)^(1:TF))
1/((1+0.03/12)^(1:36))
q_lev
stoch_mod$surplus
source("bond.R")
source("def.R")
source("liab.R")
source("cashFlow.R")
source("optimize.R")
N=5000
TF=36
df0 = getDefDat(type="read")
markDat = getBondDat(type="read")
l_df = runSimLiab(type="gen",N_SIM=N)
simCF = runSimCF(markDat=markDat,defProb=df0,N_SIM = N,TF=TF)
stoch_mod = stochLiabMatch(l_df = l_df,simCF=simCF,markDat = markDat)
stoch_mod$surplus
stoch_mod$slack
q_lev = stoch_mod$A[2:(1+length(stoch_mod$surplus)),,drop=FALSE] %*%
c(stoch_mod$soln,stoch_mod$slack,stoch_mod$surplus) +
stoch_mod$surplus
q_lev
l
summary(l)
(1/(1+markDat$RF[1]/12)^(1:TF))
l123=vector("list",3)
l123[[4]]=500
l123
l123=vector("list",3)
l123
source("bond.R")
source("def.R")
source("liab.R")
source("cashFlow.R")
source("optimize.R")
N=5000
TF=36
df0 = getDefDat(type="read")
markDat = getBondDat(type="read")
l_df = runSimLiab(type="gen",N_SIM=N)
simCF = runSimCF(markDat=markDat,defProb=df0,N_SIM = N,TF=TF)
stoch_mod = stochLiabMatch(l_df = l_df,simCF=simCF,markDat = markDat)
stoch_mod$b2
q_lev = stoch_mod$A[2:(1+length(stoch_mod$surplus)),,drop=FALSE] %*%
c(stoch_mod$soln,stoch_mod$slack,stoch_mod$surplus) +
stoch_mod$surplus
q_lev
q_lev = stoch_mod$b2
q_lev = as.numeric(stoch_mod$b2)
# we need to reverse engineer the probability levels
p_lev = numeric()
l = sort(l_df %*% (1/(1+markDat$RF[1]/12)^(1:TF)))
l_loren = sapply(l,function(s) {mean(l[which(l<=s)])})
l_loren
q_lev[1]
q=q_lev[1]
which(l_ren<q)
which(l_loren<q)
which(l_loren>q)[1]
which(l_loren>q)
l_loren
l_loren[5000]
mean(l)
stoch_mod$surplus
